// Generated by CoffeeScript 1.4.0
(function() {
  var LINE_PREFIX, childProcess, compact, compactMap, flatten, isString, keys, map, watch, wrap, _, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  watch = require('watch');

  childProcess = require('child_process');

  _ = (_ref = require('underscore'), wrap = _ref.wrap, map = _ref.map, flatten = _ref.flatten, compact = _ref.compact, isString = _ref.isString, keys = _ref.keys, _ref);

  LINE_PREFIX = "---";

  compactMap = function(arr, fn) {
    return compact(map(flatten(arr), fn));
  };

  module.exports = function(path, command, options) {
    var Reaktr, args, exclude, excluded, include, interval, longRunning, notIncluded;
    if (options == null) {
      options = {};
    }
    longRunning = options.longRunning, interval = options.interval, exclude = options.exclude, include = options.include;
    if (include != null) {
      include = RegExp(include);
      notIncluded = function() {
        return !include.test.apply(include, arguments);
      };
    }
    if (exclude != null) {
      exclude = RegExp(exclude);
      excluded = function() {
        return exclude.test.apply(exclude, arguments);
      };
    }
    args = [command];
    args.unshift('-c');
    if (interval == null) {
      interval = 1000;
    }
    Reaktr = (function() {

      function Reaktr() {
        this.restartProcess = __bind(this.restartProcess, this);

        this.earlyProcessExit = __bind(this.earlyProcessExit, this);

        this.startProcess = __bind(this.startProcess, this);

        this.parseFiles = __bind(this.parseFiles, this);

        this.onChange = __bind(this.onChange, this);

      }

      Reaktr.prototype.start = function() {
        var after;
        this.log("");
        this.log("Observing files in `" + path + "` and running `" + command + "` on changes");
        this.log("");
        if (include != null) {
          this.log("Include files matching: " + include);
        }
        if (exclude != null) {
          this.log("Exclude files matching: " + exclude);
        }
        if (longRunning) {
          this.process = this.startProcess();
          this.startProcess = this.processRestarter(this.startProcess);
        }
        after = _.after;
        this.onChange = after(2, this.onChange);
        return watch.watchTree(path, {
          interval: interval
        }, this.onChange);
      };

      Reaktr.prototype.log = function(message) {
        return console.log("" + LINE_PREFIX + " " + message);
      };

      Reaktr.prototype.onChange = function(files) {
        var file, _i, _len;
        files = this.parseFiles(files);
        if (!files.length) {
          return;
        }
        this.log("");
        this.log("Change detected:");
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          this.log("." + file);
        }
        this.log("");
        return this.startProcess();
      };

      Reaktr.prototype.parseFiles = function(files) {
        if (!isString(files)) {
          files = keys(files);
        }
        return compactMap([files], this.parseFile);
      };

      Reaktr.prototype.parseFile = function(file) {
        file = file.replace(path, '') || '/';
        if (typeof notIncluded === "function" ? notIncluded(file) : void 0) {
          file = null;
        }
        if (typeof excluded === "function" ? excluded(file) : void 0) {
          file = null;
        }
        return file;
      };

      Reaktr.prototype.startProcess = function() {
        var child;
        this.log("Running `" + command + "`");
        this.log("");
        child = childProcess.spawn("sh", args, {
          stdio: 'inherit'
        });
        if (longRunning) {
          child.on('exit', this.earlyProcessExit);
        }
        return child;
      };

      Reaktr.prototype.earlyProcessExit = function(code) {
        if (code == null) {
          code = 0;
        }
        this.log("");
        this.log("PID " + this.process.pid + " exited early with " + code);
        return this.process = null;
      };

      Reaktr.prototype.processRestarter = function(startFn) {
        var _this = this;
        return function() {
          if (_this.process == null) {
            return _this.process = startFn();
          }
          _this.log("Killing process with PID " + _this.process.pid);
          _this.process.removeListener('exit', _this.earlyProcessExit);
          _this.process.on('exit', _this.restartProcess(_this.process, startFn));
          return _this.process.kill();
        };
      };

      Reaktr.prototype.restartProcess = function(oldProcess, startFn) {
        var _this = this;
        return function(code) {
          if (code == null) {
            code = 0;
          }
          _this.log("PID " + oldProcess.pid + " exited with " + code);
          _this.log("");
          return _this.process = startFn();
        };
      };

      return Reaktr;

    })();
    return new Reaktr;
  };

}).call(this);
