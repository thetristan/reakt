// Generated by CoffeeScript 1.4.0
(function() {
  var LINE_PREFIX, childProcess, flatten, gaze, minimatch;

  minimatch = require('minimatch');

  gaze = require('gaze');

  childProcess = require('child_process');

  flatten = require('lodash').flatten;

  LINE_PREFIX = "---";

  module.exports = function(path, command, opts) {
    var END_COLOR, START_COLOR, color, daemon, exclude, excluded, include, interval, log, process, restartProcess, startProcess;
    if (opts == null) {
      opts = {};
    }
    color = opts.color, daemon = opts.daemon, interval = opts.interval, exclude = opts.exclude, include = opts.include;
    if (interval == null) {
      interval = 1000;
    }
    START_COLOR = color ? "\x1b[30;1m" : "";
    END_COLOR = color ? "\x1b[0m" : "";
    log = function(message) {
      return console.log("" + START_COLOR + LINE_PREFIX + " " + message + END_COLOR);
    };
    excluded = function(file) {
      if (!exclude || exclude.length === 0) {
        return false;
      }
      return flatten([false, exclude]).reduce(function(memo, x) {
        var trimLen;
        trimLen = x.indexOf('/') && path.length + 1;
        return minimatch(file.substr(trimLen), x);
      });
    };
    process = null;
    log("Observing files in `" + path + "` and running `" + command + "` on changes");
    include.forEach(function(i) {
      return log("Include files matching: " + i);
    });
    exclude.forEach(function(x) {
      return log("Exclude files matching: " + x);
    });
    if (daemon) {
      process = startProcess();
      startProcess = processRestarter(startProcess);
    }
    gaze(include, function(err, watcher) {
      return watcher.on('all', function(evt, file) {
        if (excluded(file) || process) {
          return;
        }
        log("Change detected for " + file);
        return process = startProcess();
      });
    });
    startProcess = function() {
      var child, processRestarter;
      if (daemon) {
        log("Starting `" + command + "`");
      } else {
        log("Running `" + command + "`");
      }
      child = childProcess.spawn("sh", ['-c', command], {
        stdio: 'inherit'
      });
      child.on('exit', function(code) {
        if (code == null) {
          code = 0;
        }
        log("PID " + child.pid + " exited with " + code);
        return process = null;
      });
      child;

      processRestarter = function(startFn) {};
      return function() {
        if (process == null) {
          return process = startFn();
        }
        log("Killing process with PID " + process.pid);
        process.removeListener('exit', earlyProcessExit);
        process.on('exit', restartProcess(process, startFn));
        return process.kill();
      };
    };
    return restartProcess = function(oldProcess, startFn) {
      return function(code) {
        if (code == null) {
          code = 0;
        }
        log("PID " + oldProcess.pid + " exited with " + code);
        return process = startFn();
      };
    };
  };

}).call(this);
